#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        make -j $(nproc) toolchain/{clean,install}
        ### Executed in   34.42 mins
        
        printf '
        &fan {
        \tpwms = <&pwm 0 50000 0>;
        \tstatus = "okay";
        };
        
        &pwm {
        \t//pinctrl-names = "default";
        \t//pinctrl-0 = <&pwm_pins>;
        \tstatus = "okay";
        };
        ' >> target/linux/mediatek/files-6.1/arch/arm64/boot/dts/mediatek/mt7988a-bananapi-bpi-r4.dts
        
        printf '--- build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/linux-6.1.82/drivers/pwm/pwm-mediatek.c\t2024-03-25 17:50:57.303847248 -0700
        +++ build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/linux-6.1.82/drivers/pwm/pwm-mediatek.c\t2024-03-25 17:54:04.349927891 -0700
        @@ -60,7 +60,7 @@
         };
         
         static const unsigned int pwm_mediatek_reg_offset[] = {
        -\t0x0010, 0x0050, 0x0090, 0x00d0, 0x0110, 0x0150, 0x0190, 0x0220
        +\t0x0080, 0x00c0, 0x0100, 0x0140, 0x0180, 0x01c0, 0x0200, 0x0240
         };
         
         static inline struct pwm_mediatek_chip *
        @@ -281,77 +281,14 @@
         \treturn 0;
         }
         
        -static const struct pwm_mediatek_of_data mt2712_pwm_data = {
        +static const struct pwm_mediatek_of_data mt7988_pwm_data = {
         \t.num_pwms = 8,
         \t.pwm45_fixup = false,
         \t.has_ck_26m_sel = false,
         };
         
        -static const struct pwm_mediatek_of_data mt6795_pwm_data = {
        -\t.num_pwms = 7,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = false,
        -};
        -
        -static const struct pwm_mediatek_of_data mt7622_pwm_data = {
        -\t.num_pwms = 6,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = true,
        -};
        -
        -static const struct pwm_mediatek_of_data mt7623_pwm_data = {
        -\t.num_pwms = 5,
        -\t.pwm45_fixup = true,
        -\t.has_ck_26m_sel = false,
        -};
        -
        -static const struct pwm_mediatek_of_data mt7628_pwm_data = {
        -\t.num_pwms = 4,
        -\t.pwm45_fixup = true,
        -\t.has_ck_26m_sel = false,
        -};
        -
        -static const struct pwm_mediatek_of_data mt7629_pwm_data = {
        -\t.num_pwms = 1,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = false,
        -};
        -
        -static const struct pwm_mediatek_of_data mt8183_pwm_data = {
        -\t.num_pwms = 4,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = true,
        -};
        -
        -static const struct pwm_mediatek_of_data mt8365_pwm_data = {
        -\t.num_pwms = 3,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = true,
        -};
        -
        -static const struct pwm_mediatek_of_data mt7986_pwm_data = {
        -\t.num_pwms = 2,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = true,
        -};
        -
        -static const struct pwm_mediatek_of_data mt8516_pwm_data = {
        -\t.num_pwms = 5,
        -\t.pwm45_fixup = false,
        -\t.has_ck_26m_sel = true,
        -};
        -
         static const struct of_device_id pwm_mediatek_of_match[] = {
        -\t{ .compatible = "mediatek,mt2712-pwm", .data = &mt2712_pwm_data },
        -\t{ .compatible = "mediatek,mt6795-pwm", .data = &mt6795_pwm_data },
        -\t{ .compatible = "mediatek,mt7622-pwm", .data = &mt7622_pwm_data },
        -\t{ .compatible = "mediatek,mt7623-pwm", .data = &mt7623_pwm_data },
        -\t{ .compatible = "mediatek,mt7628-pwm", .data = &mt7628_pwm_data },
        -\t{ .compatible = "mediatek,mt7629-pwm", .data = &mt7629_pwm_data },
        -\t{ .compatible = "mediatek,mt7986-pwm", .data = &mt7986_pwm_data },
        -\t{ .compatible = "mediatek,mt8183-pwm", .data = &mt8183_pwm_data },
        -\t{ .compatible = "mediatek,mt8365-pwm", .data = &mt8365_pwm_data },
        -\t{ .compatible = "mediatek,mt8516-pwm", .data = &mt8516_pwm_data },
        +\t{ .compatible = "mediatek,mt7988-pwm", .data = &mt7988_pwm_data },
         \t{ },
         };
         MODULE_DEVICE_TABLE(of, pwm_mediatek_of_match);
        ' > /tmp/pwm-mediatek.c.patch
        
        make -j $(nproc) target/linux/{prereq,clean,download,prepare}
        patch build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/linux-6.1.82/drivers/pwm/pwm-mediatek.c < /tmp/pwm-mediatek.c.patch
        make -j $(nproc) target/linux/compile
        ### Executed in  342.24 secs
        
        # ensure `.vermagic` value matches, so `opkg` works with snapshot packages:
        find build_dir/ -name .vermagic -exec cat {} \;
        curl -s "https://downloads.openwrt.org/snapshots/targets/mediatek/filogic/openwrt-mediatek-filogic.manifest" \
            | sed -n 's/^kernel - .\+\(-\|~\)\([a-f0-9]\+\)\(-r[0-9]\+\)\?$/\2/p'
        
        # customize package selection in resultant image (default packages can be retrieved from https://firmware-selector.openwrt.org/?version=SNAPSHOT&target=mediatek%2Ffilogic&id=bananapi_bpi-r4 ):
        printf '
        CONFIG_PACKAGE_...=y
        ' >> .config
        
        make defconfig
        
        # save customized `.config` for later builds:
        ./scripts/diffconfig.sh | awk '!seen[$0]++' > diffconfig
        mv diffconfig .config
        
        # customize files:
        mkdir -p files/
        #...
        
        # customize first run image configuration:
        printf $'#!/bin/sh
        
        # fill in with `uci set ...` values from `uci show`
        
        ' > files/etc/uci-defaults/99-custom
        chmod 0644 files/etc/uci-defaults/99-custom
        
        # expand config:
        make defconfig
        
        # download stage:
        make -j $(nproc) download
        ### Executed in   36.62 secs
        
        # build:
        make -j $(nproc) world
        ### Executed in  664.17 secs

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
